# Use this configuration file to configure the 'validate.py' script. This file
# can optionally be placed in the SCS_CONFIG_DIR, and when absent, a default
# configuration is used. Any below setting can be omitted, in which casae a
# default configuraiton is used.

# By default, all endpoints are tested with a GET request to check if they
# return a status_code < 400. Under 'endpoints', you can override the behaviour
# for specific endpoints
endpoints:
  /configs/cluster_name: false
  /configs/custer_name_redirect:
    request:
      method: GET
    response:
      status: 301
      headers:
        Location: /configs/cluster_name
      text: 'validate against this'
      json:
        validate: true
        against: true
        this: true
        object: true
      yaml:
        validate: true
        against: true
        this: true
        object: true

# You can override root-level proerties of the scs-configuration.yaml file,
# to be able to use alternative settings when validating This can be useful to
# disable YAML tag constructors that depend on configuration variables (e.g.
# secrets) that are not available. You can use the
# scs.yaml.SCSSimpleValueConstructor to still parse these tags without errors,
# but give all occurences a default value
scs_configuration:
  extensions:
    constructors:
      - name: scs.yaml.SCSSimpleValueConstructor
        options:
            tag: '!cloud-dependent-tag'
            value: A default value to return for this tag
  # The below 'log' configuration is set by default. If you define a custom
  # scs_configuration.log object, this will be overriden.
  # logs:
  #   audit:
  #     stdout:
  #       level: ERROR
  #   application:
  #     stdout:
  #       level: ERROR

# Regardless of the above scs_configuration, the script already by default (1)
# implements a dummy blueprint for authentication, to disable it, and (2)
# extends the constructor list with a SCSSimpleValueconstructor for
# the !scs-secret tag, so configuraitons can be validated in the
# absence of secrets.


# By default, errors are raised by the test client, rather than returning a
# response with a 500 error code. If you need to check for 500 error codes,
# enable the below.
handle_errors: false
